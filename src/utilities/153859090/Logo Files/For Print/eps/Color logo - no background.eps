%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2372 771
%%HiResBoundingBox: 0 0 2371.9199 770.88
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2371.9199 770.88 re
W
q
[0.24 0 0 -0.24 0 770.88] cm
q
0 0 9883.333 3210.0515 re
W*
q
[39.400242 0 0 39.41832 253.60587 558.1026] cm
q
29.4004 17.288601 m
30.1084 17.579599 30.777401 17.809601 31.0504 17.7596 c
31.711399 17.521601 31.957399 16.7836 32.031399 16.476601 c
32.1744 15.8866 32.108398 15.2766 31.868401 14.8166 c
31.773399 14.9706 31.6754 15.1426 31.596399 15.2806 c
31.1014 16.1476 30.492399 17.215599 29.4004 17.288601 c
40.000401 30.999599 m
39.6744 30.999599 39.3564 30.8416 39.163399 30.549601 c
38.683399 29.820601 38.524399 29.0756 38.3964 28.476601 c
38.352402 28.2726 38.296398 28.006599 38.242401 27.8666 c
38.074402 27.8706 37.609402 27.9426 36.517399 28.440599 c
35.162399 29.066601 34.399399 29.298599 33.747398 28.9186 c
33.151402 28.5716 33.100399 27.948601 33.072399 27.614599 c
33.053398 27.381599 33.0434 27.2616 32.9604 27.1726 c
32.941399 27.233601 32.922401 27.2946 32.906399 27.347601 c
32.7234 27.9436 32.472401 28.7616 31.6394 29.027599 c
30.774401 29.308599 29.979401 28.695601 29.718399 28.4956 c
28.8584 27.8326 28.5424 26.9606 28.288401 26.260599 c
27.919399 25.2386 27.843401 25.0266 26.3274 25.389601 c
23.5994 26.0406 22.3594 26.177601 21.742399 25.337601 c
21.1674 24.555599 21.6714 23.708599 22.2064 22.8116 c
22.933399 21.590599 23.839399 20.0716 23.1444 18.409599 c
22.9424 17.933599 22.405399 16.6616 23.2304 15.8586 c
24.180401 14.9346 25.746401 15.6486 27.912399 16.6346 c
28.068399 16.705601 28.2404 16.7836 28.4214 16.864599 c
28.315399 16.712601 28.250401 16.5306 28.242399 16.3326 c
28.1264 13.5246 29.632401 10.7896 31.822399 9.8296 c
33.3074 9.1776 34.839401 9.485601 36.025398 10.6726 c
36.304401 10.9556 36.511398 10.9626 36.7384 10.8856 c
37.6394 10.5826 38.826401 8.8636 39.066399 7.0156 c
39.151402 6.3576 39.166401 5.1946 38.371399 4.5586 c
37.8764 4.6186 36.595402 5.1686 35.727402 5.5416 c
34.159401 6.2146 32.6474 6.8866 31.631399 6.8446 c
29.7134 6.8136 28.1854 7.9926 26.5814 9.2186 c
24.2694 10.9866 21.649401 12.9916 17.5644 11.3896 c
17.208401 11.2486 16.9624 10.9176 16.9324 10.5366 c
16.749399 8.1966 18.8004 7.1176 20.4494 6.2496 c
21.7684 5.5566 23.013399 4.9006 23.207399 3.8286 c
23.245399 3.6146 23.2614 3.4526 23.266399 3.3336 c
22.739401 3.5276 21.537399 4.2526 18.8664 6.7156 c
18.2834 7.2546 18.044399 7.4756 17.527401 7.3766 c
17.0744 7.2886 16.7414 6.9026 16.7194 6.4416 c
16.6994 5.9966 16.877399 5.4836 17.194401 4.6166 c
17.3834 4.0996 17.5984 3.5126 17.6604 3.1436 c
17.7514 2.5996 18.2644 2.2306 18.811399 2.3226 c
19.3234 2.4076 19.679399 2.8686 19.6444 3.3756 c
22.0124 1.4406 23.382401 0.9206 24.385401 1.4706 c
25.156401 1.8936 25.4224 2.8066 25.1754 4.1826 c
24.808399 6.2166 22.9874 7.1746 21.3804 8.0196 c
20.072399 8.7086 19.294399 9.1786 19.0264 9.7706 c
21.642401 10.4766 23.3794 9.1486 25.3664 7.6296 c
27.083401 6.3176 29.062401 4.8086 31.642401 4.8446 c
31.648399 4.8446 l
32.281399 4.8446 33.754398 4.2126 34.937401 3.7036 c
37.2384 2.7156 38.478401 2.2256 39.3424 2.7946 c
40.6824 3.6776 41.304401 5.3096 41.0494 7.2726 c
40.7644 9.4696 39.312401 12.1306 37.3764 12.7816 c
36.367401 13.1226 35.384399 12.8716 34.6064 12.0816 c
34.004398 11.4796 33.3554 11.3406 32.6264 11.6616 c
32.221401 11.8386 31.818399 12.1556 31.4624 12.577601 c
31.5394 12.5546 31.6194 12.5386 31.7034 12.5286 c
32.0504 12.4876 32.573399 12.5546 33.082401 13.0996 c
33.976398 14.0566 34.318401 15.5306 33.975399 16.948601 c
33.6614 18.242599 32.811401 19.2526 31.7024 19.6486 c
30.6614 20.0226 29.2614 19.445601 27.0844 18.454599 c
26.475401 18.177601 25.5784 17.7686 24.958401 17.562599 c
24.9674 17.5856 24.9774 17.6096 24.9874 17.6336 c
26.0734 20.2286 24.728399 22.486601 23.923401 23.8356 c
23.9214 23.840599 23.9184 23.8456 23.9154 23.850599 c
24.340401 23.7826 24.9604 23.659599 25.8624 23.4436 c
28.8634 22.722599 29.634399 24.104601 30.169399 25.579599 c
30.368401 26.128599 30.5404 26.6036 30.9384 26.909599 c
30.940399 26.9126 30.943399 26.913601 30.9454 26.9156 c
30.9624 26.861601 30.979401 26.808599 30.993401 26.7616 c
31.1674 26.195601 31.3834 25.4916 32.0634 25.159599 c
32.337399 25.024599 32.7854 24.9126 33.370399 25.135599 c
34.513401 25.5776 34.8694 26.343599 34.9944 26.9226 c
35.1684 26.8526 35.393398 26.756599 35.6824 26.622601 c
37.3974 25.8416 38.4114 25.6826 39.186401 26.0716 c
40.016399 26.489599 40.2024 27.3596 40.352402 28.058599 c
40.454399 28.538601 40.561401 29.034599 40.8344 29.4506 c
41.138401 29.9116 41.010399 30.531599 40.548401 30.8356 c
40.379398 30.9466 40.1884 30.999599 40.000401 30.999599 c
W*
[24.387628 0 0 29.735514 16.717877 1.264093] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.000758 def
/yMin -0.011552 def
/xMax 1.008156 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.04 mul 0.078 add
1 index 1 exp 0.51 mul 0.49 add
2 index 1 exp 0.576 mul 0.424 add
4 3 roll pop 
}
def
-0.000758 1.008156 0 axialSH
Q
q
11.5254 38.6147 m
11.0864 38.6147 10.6864 38.324699 10.5634 37.8857 c
10.4194 37.3717 10.7034 36.834702 11.2104 36.665699 c
11.5884 36.5397 l
12.0874 36.373699 12.6314 36.623699 12.830401 37.111698 c
13.0294 37.599701 12.8154 38.1577 12.3404 38.387699 c
12.1894 38.4617 l
12.1214 38.494701 12.0504 38.519699 11.9774 38.536701 c
11.7504 38.589699 l
11.6754 38.606701 11.5994 38.6147 11.5254 38.6147 c
W*
[2.378571 0 0 2.126194 10.526024 36.488509] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.044827 def
/yMin -0.053998 def
/xMax 1.05247 def
/yMax 0.999998 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.04 mul 0.078 add
1 index 1 exp 0.51 mul 0.49 add
2 index 1 exp 0.576 mul 0.424 add
4 3 roll pop 
}
def
-0.044827 1.05247 0 axialSH
Q
q
19.667 57.659199 m
19.297001 57.659199 18.941 57.452202 18.768 57.097198 c
16.75 52.9562 l
13.496 52.5172 l
13.396 52.503201 13.298 52.474201 13.207 52.432201 c
7.599 49.814201 l
7.47 49.7542 7.356 49.667198 7.264 49.5602 c
6.926 49.168201 6.599 48.7682 6.282 48.360199 c
6.192 48.244202 6.128 48.1092 6.097 47.966202 c
5.024 43.181198 l
4.96 42.898201 5.024 42.600201 5.197 42.367199 c
8.227 38.285198 l
8.323 38.1562 8.449 38.0522 8.594 37.981201 c
11.316 36.662201 l
11.384 36.630199 11.455 36.605202 11.527 36.5882 c
18.129999 35.063202 l
18.402 34.998199 18.691 35.054199 18.923 35.214199 c
21.709999 37.1362 l
25.120001 38.209202 l
28.531 38.075199 l
28.766001 38.072201 28.986 38.1362 29.17 38.2742 c
34.518002 42.2812 l
34.601002 42.343201 34.673 42.417198 34.731998 42.501202 c
36.813999 45.419201 l
37.134998 45.869202 37.029999 46.493198 36.581001 46.814201 c
36.130001 47.135201 35.505001 47.0312 35.186001 46.5802 c
33.194 43.7882 l
28.254999 40.0872 l
25.024 40.214199 l
24.913 40.217201 24.794001 40.203201 24.684999 40.169201 c
20.966 38.998199 l
20.871 38.968201 20.781 38.924198 20.698999 38.867199 c
18.150999 37.111198 l
12.087 38.512199 l
9.687 39.674198 l
7.076 43.1912 l
7.999 47.308201 l
8.208 47.5742 8.422 47.835201 8.641 48.093201 c
13.915 50.555199 l
17.549 51.0462 l
17.879999 51.091202 18.167 51.298199 18.313999 51.599201 c
20.565001 56.221199 l
20.806999 56.718201 20.601 57.3162 20.104 57.558201 c
19.962999 57.627201 19.813999 57.659199 19.667 57.659199 c
W*
[32.000358 0 0 22.622525 4.999695 35.036678] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.00124 def
/yMin -0.001701 def
/xMax 1.004217 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.04 mul 0.078 add
1 index 1 exp 0.51 mul 0.49 add
2 index 1 exp 0.576 mul 0.424 add
4 3 roll pop 
}
def
-0.00124 1.004217 0 axialSH
Q
q
1.4141 35.703098 m
1.1221 35.703098 0.8341 35.583099 0.6411 35.3451 c
0.2971 34.920101 0.3311 34.320099 0.7501 33.9701 c
0.7581 33.9631 0.8201 33.914101 0.8281 33.9081 c
1.3351 33.405102 1.8061 33.050098 2.2211 32.737099 c
2.9491 32.187099 3.5241 31.753099 4.1271 30.667101 c
4.5271 29.9471 4.4801 29.767099 4.3061 29.097099 c
4.1331 28.4321 3.8951 27.5201 4.0041 25.900101 c
4.1041 24.3881 4.0591 23.9981 4.0101 23.5861 c
3.9501 23.0781 3.8891 22.555099 4.0031 20.7181 c
4.1121 18.979099 3.8331 18.7731 3.2241 18.323099 c
2.7801 17.9951 2.6861 17.368099 3.0141 16.924101 c
3.3431 16.480101 3.9701 16.386101 4.4131 16.7141 c
5.6071 17.597099 6.1491 18.4401 5.9991 20.8431 c
5.8961 22.4991 5.9471 22.9321 5.9961 23.351101 c
6.0531 23.8361 6.1121 24.337099 5.9991 26.0331 c
5.9131 27.3291 6.0871 28.001101 6.2421 28.5931 c
6.4971 29.5751 6.6101 30.3181 5.8751 31.639099 c
5.0671 33.0951 4.2321 33.724098 3.4261 34.333099 c
3.0271 34.634102 2.6511 34.917099 2.2511 35.3181 c
2.1911 35.377098 2.1281 35.430099 2.0621 35.481098 c
1.8731 35.629101 1.6431 35.703098 1.4141 35.703098 c
W*
[6.029198 0 0 19.184653 0.406962 16.518449] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.018222 def
/yMin -0.006899 def
/xMax 1.02885 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.04 mul 0.078 add
1 index 1 exp 0.51 mul 0.49 add
2 index 1 exp 0.576 mul 0.424 add
4 3 roll pop 
}
def
-0.018222 1.02885 0 axialSH
Q
q
50 25 m
48.346001 25 47 26.346001 47 28 c
47 46.259998 l
47 46.585999 46.84 46.893002 46.571999 47.080002 c
44.611 48.449001 43.667 50.778 44.108002 53.155998 c
44.547001 55.523998 46.426998 57.423 48.785999 57.882 c
50.591 58.231998 52.424999 57.777 53.813 56.632 c
55.202999 55.487 56 53.798 56 52 c
56 50.043999 55.037998 48.205002 53.426998 47.080002 c
53.16 46.893002 53 46.585999 53 46.259998 c
53 28 l
53 26.346001 51.653999 25 50 25 c
49.986 59.998001 m
49.460999 59.998001 48.931999 59.946999 48.403999 59.845001 c
45.245998 59.230999 42.729 56.689999 42.140999 53.521 c
41.588001 50.539001 42.678001 47.612999 45 45.758999 c
45 28 l
45 25.243 47.243 23 50 23 c
52.757 23 55 25.243 55 28 c
55 45.759998 l
56.888 47.273998 58 49.569 58 52 c
58 54.397999 56.938 56.648998 55.085999 58.175999 c
53.641998 59.366001 51.842999 59.998001 49.986 59.998001 c
W*
[16.000621 0 0 36.998004 41.999378 23.000002] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.02571 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.04 mul 0.078 add
1 index 1 exp 0.51 mul 0.49 add
2 index 1 exp 0.576 mul 0.424 add
4 3 roll pop 
}
def
-0.02571 1 0 axialSH
Q
q
50 50 m
48.896999 50 48 50.896999 48 52 c
48 53.103001 48.896999 54 50 54 c
51.103001 54 52 53.103001 52 52 c
52 50.896999 51.103001 50 50 50 c
50 56 m
47.793999 56 46 54.206001 46 52 c
46 49.793999 47.793999 48 50 48 c
52.206001 48 54 49.793999 54 52 c
54 54.206001 52.206001 56 50 56 c
W*
[8 0 0 8 46 48.000006] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0.000001 def
/xMax 1 def
/yMax 0.999999 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.04 mul 0.078 add
1 index 1 exp 0.51 mul 0.49 add
2 index 1 exp 0.576 mul 0.424 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
q
50 50 m
49.448002 50 49 49.551998 49 49 c
49 43 l
49 42.448002 49.448002 42 50 42 c
50.551998 42 51 42.448002 51 43 c
51 49 l
51 49.551998 50.551998 50 50 50 c
W*
[2 0 0 8 48.999999 42.000004] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0.000001 def
/yMin -0.000001 def
/xMax 1.000001 def
/yMax 0.999999 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.04 mul 0.078 add
1 index 1 exp 0.51 mul 0.49 add
2 index 1 exp 0.576 mul 0.424 add
4 3 roll pop 
}
def
0.000001 1.000001 0 axialSH
Q
q
30 60 m
13.458 60 0 46.542 0 30 c
0 13.458 13.458 0 30 0 c
46.542 0 60 13.458 60 30 c
60 30.552 59.551998 31 59 31 c
58.448002 31 58 30.552 58 30 c
58 14.561 45.438999 2 30 2 c
14.561 2 2 14.561 2 30 c
2 45.438999 14.561 58 30 58 c
32.481998 58 34.944 57.674999 37.316002 57.035 c
37.852001 56.891998 38.398998 57.208 38.542 57.740002 c
38.686001 58.272999 38.370998 58.821999 37.837002 58.966 c
35.294998 59.652 32.658001 60 30 60 c
W*
[60 0 0 60 -0.0000000279124 0.0000022812] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.04 mul 0.078 add
1 index 1 exp 0.51 mul 0.49 add
2 index 1 exp 0.576 mul 0.424 add
4 3 roll pop 
}
def
0 1 0 axialSH
Q
Q
q
[91.960716 0 0 92.002914 3069.2502 525.27649] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
11.66 20 m
9.46 20 l
6.96 15.6 l
4.48 20 l
2.26 20 l
0.54 10.84 l
2.92 10.84 l
3.96 16.32 l
5.88 12.94 l
8.04 12.94 l
9.98 16.32 l
11.02 10.84 l
13.379999 10.84 l
11.66 20 l
h
19.059999 20.219999 m
19.039999 20.219999 l
18.459999 20.219999 17.859999 20.08 17.299999 19.82 c
16.779999 19.6 16.299999 19.24 15.859999 18.779999 c
15.159999 18.019999 14.739999 17.019999 14.639998 15.979999 c
14.619998 15.799998 14.599999 15.619999 14.599999 15.419998 c
14.599999 15.019999 14.659999 14.599999 14.759998 14.179998 c
14.939999 13.379998 15.319999 12.639998 15.859999 12.079998 c
16.259998 11.639998 16.719999 11.299998 17.299999 11.019999 c
17.84 10.759998 18.439999 10.639998 19.059999 10.639998 c
19.699999 10.639998 20.279999 10.759998 20.82 11.019999 c
21.42 11.299998 21.9 11.659999 22.26 12.079998 c
22.780001 12.639998 23.18 13.359998 23.380001 14.179998 c
23.480001 14.559999 23.52 14.959998 23.52 15.419998 c
23.52 15.879998 l
16.800001 15.879998 l
16.820002 16.019999 l
17.080002 17.259998 18.020002 18.159998 19.060001 18.159998 c
19.080002 18.159998 l
19.660002 18.119997 20.300001 17.759998 20.680002 17.439999 c
20.900002 17.259998 l
22.560001 18.699999 l
22.260002 18.959999 l
22.040003 19.16 21.760002 19.4 21.460003 19.559999 c
21.440002 19.559999 l
20.720003 19.98 19.940002 20.199999 19.060001 20.219999 c
19.059999 20.219999 l
h
19.059999 12.72 m
18.279999 12.72 17.5 13.26 17.08 14.1 c
17 14.26 l
21.139999 14.26 l
21.059999 14.1 l
20.6 13.240001 19.84 12.72 19.059999 12.72 c
h
29.540001 20.18 m
28.280001 20.18 27.080002 19.700001 26.16 18.800001 c
25.26 17.880001 24.76 16.68 24.76 15.420001 c
24.76 14.160002 25.26 12.960001 26.16 12.040001 c
27.059999 11.140001 28.26 10.660001 29.540001 10.660001 c
30.380001 10.660001 31.140001 10.960001 31.800001 11.56 c
31.900002 11.64 l
31.900002 10.84 l
34.32 10.84 l
34.32 20 l
31.9 20 l
31.9 19.280001 l
31.799999 19.380001 l
31.08 20.080002 30.259998 20.18 29.539999 20.18 c
29.540001 20.18 l
h
29.540001 13 m
28.26 13 27.18 14.12 27.18 15.42 c
27.18 16.74 28.26 17.84 29.540001 17.84 c
30.820002 17.84 31.900002 16.74 31.900002 15.42 c
31.900002 14.12 30.820002 13 29.540001 13 c
h
43.080002 20 m
40.68 20 l
39.799999 20 38.98 19.66 38.380001 19.059999 c
37.760002 18.439999 37.440002 17.639999 37.440002 16.76 c
37.440002 12.96 l
36.160004 12.96 l
36.160004 10.9 l
37.440002 10.9 l
37.440002 7.3 l
39.820004 7.3 l
39.820004 10.9 l
42.480003 10.9 l
42.480003 12.959999 l
39.820004 12.959999 l
39.820004 16.719999 l
39.820004 17.219999 40.260002 17.68 40.700005 17.68 c
42.440006 17.68 l
43.080002 20 l
h
53.439999 20 m
50.919998 20 l
50.919998 15.1 l
50.919998 14.020001 50.059998 13.18 48.98 13.18 c
47.939999 13.18 47.040001 14.04 47.040001 15.1 c
47.040001 20 l
44.540001 20 l
44.540001 5.32 l
47.040001 5.32 l
47.040001 11.5 l
47.66 10.88 48.32 10.66 48.98 10.66 c
50.18 10.66 51.299999 11.12 52.139999 11.94 c
52.98 12.799999 53.439999 13.92 53.439999 15.099999 c
53.439999 20 l
h
59.5 20.219999 m
59.48 20.219999 l
58.899998 20.219999 58.299999 20.08 57.739998 19.82 c
57.219997 19.6 56.739998 19.24 56.299999 18.779999 c
55.599998 18.019999 55.18 17.019999 55.079998 15.979999 c
55.059998 15.799998 55.039997 15.619999 55.039997 15.419998 c
55.039997 15.019999 55.099998 14.599999 55.199997 14.179998 c
55.379997 13.379998 55.759998 12.639998 56.299995 12.079998 c
56.699997 11.639998 57.159996 11.299998 57.739994 11.019999 c
58.279995 10.759998 58.879993 10.639998 59.499992 10.639998 c
60.139992 10.639998 60.719994 10.759998 61.259991 11.019999 c
61.859989 11.299998 62.339993 11.659999 62.699989 12.079998 c
63.21999 12.639998 63.619987 13.359998 63.819988 14.179998 c
63.919987 14.559999 63.959988 14.959998 63.959988 15.419998 c
63.959988 15.879998 l
57.239986 15.879998 l
57.259987 16.019999 l
57.519985 17.259998 58.459988 18.159998 59.499989 18.159998 c
59.519989 18.159998 l
60.099991 18.119997 60.73999 17.759998 61.119987 17.439999 c
61.339989 17.259998 l
62.999989 18.699999 l
62.699989 18.959999 l
62.479988 19.16 62.199989 19.4 61.89999 19.559999 c
61.87999 19.559999 l
61.159988 19.98 60.37999 20.199999 59.499989 20.219999 c
59.5 20.219999 l
h
59.5 12.72 m
58.720001 12.72 57.939999 13.26 57.52 14.1 c
57.439999 14.26 l
61.579998 14.26 l
61.499996 14.1 l
61.039997 13.240001 60.279995 12.72 59.499996 12.72 c
59.5 12.72 l
h
68.220001 20 m
65.700005 20 l
65.700005 10.84 l
68.220001 10.84 l
68.220001 11.58 l
68.940002 10.86 70.020004 10.62 70.739998 10.62 c
71.339996 10.62 l
70.739998 13.12 l
70.360001 13.12 l
69.18 13.12 68.220001 14.04 68.220001 15.139999 c
68.220001 20 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
